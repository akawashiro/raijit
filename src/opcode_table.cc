#include "opcode_table.h"
#include "opcode.h"

#include <map>

#include "log.h"

namespace {
std::map<uint8_t, std::string> opcode_to_name = {
    {CACHE, "CACHE"},
    {POP_TOP, "POP_TOP"},
    {PUSH_NULL, "PUSH_NULL"},
    {INTERPRETER_EXIT, "INTERPRETER_EXIT"},
    {END_FOR, "END_FOR"},
    {END_SEND, "END_SEND"},
    {NOP, "NOP"},
    {UNARY_NEGATIVE, "UNARY_NEGATIVE"},
    {UNARY_NOT, "UNARY_NOT"},
    {UNARY_INVERT, "UNARY_INVERT"},
    {RESERVED, "RESERVED"},
    {BINARY_SUBSCR, "BINARY_SUBSCR"},
    {BINARY_SLICE, "BINARY_SLICE"},
    {STORE_SLICE, "STORE_SLICE"},
    {GET_LEN, "GET_LEN"},
    {MATCH_MAPPING, "MATCH_MAPPING"},
    {MATCH_SEQUENCE, "MATCH_SEQUENCE"},
    {MATCH_KEYS, "MATCH_KEYS"},
    {PUSH_EXC_INFO, "PUSH_EXC_INFO"},
    {CHECK_EXC_MATCH, "CHECK_EXC_MATCH"},
    {CHECK_EG_MATCH, "CHECK_EG_MATCH"},
    {WITH_EXCEPT_START, "WITH_EXCEPT_START"},
    {GET_AITER, "GET_AITER"},
    {GET_ANEXT, "GET_ANEXT"},
    {BEFORE_ASYNC_WITH, "BEFORE_ASYNC_WITH"},
    {BEFORE_WITH, "BEFORE_WITH"},
    {END_ASYNC_FOR, "END_ASYNC_FOR"},
    {CLEANUP_THROW, "CLEANUP_THROW"},
    {STORE_SUBSCR, "STORE_SUBSCR"},
    {DELETE_SUBSCR, "DELETE_SUBSCR"},
    {GET_ITER, "GET_ITER"},
    {GET_YIELD_FROM_ITER, "GET_YIELD_FROM_ITER"},
    {LOAD_BUILD_CLASS, "LOAD_BUILD_CLASS"},
    {LOAD_ASSERTION_ERROR, "LOAD_ASSERTION_ERROR"},
    {RETURN_GENERATOR, "RETURN_GENERATOR"},
    {RETURN_VALUE, "RETURN_VALUE"},
    {SETUP_ANNOTATIONS, "SETUP_ANNOTATIONS"},
    {LOAD_LOCALS, "LOAD_LOCALS"},
    {POP_EXCEPT, "POP_EXCEPT"},
    {HAVE_ARGUMENT, "HAVE_ARGUMENT"},
    {STORE_NAME, "STORE_NAME"},
    {DELETE_NAME, "DELETE_NAME"},
    {UNPACK_SEQUENCE, "UNPACK_SEQUENCE"},
    {FOR_ITER, "FOR_ITER"},
    {UNPACK_EX, "UNPACK_EX"},
    {STORE_ATTR, "STORE_ATTR"},
    {DELETE_ATTR, "DELETE_ATTR"},
    {STORE_GLOBAL, "STORE_GLOBAL"},
    {DELETE_GLOBAL, "DELETE_GLOBAL"},
    {SWAP, "SWAP"},
    {LOAD_CONST, "LOAD_CONST"},
    {LOAD_NAME, "LOAD_NAME"},
    {BUILD_TUPLE, "BUILD_TUPLE"},
    {BUILD_LIST, "BUILD_LIST"},
    {BUILD_SET, "BUILD_SET"},
    {BUILD_MAP, "BUILD_MAP"},
    {LOAD_ATTR, "LOAD_ATTR"},
    {COMPARE_OP, "COMPARE_OP"},
    {IMPORT_NAME, "IMPORT_NAME"},
    {IMPORT_FROM, "IMPORT_FROM"},
    {JUMP_FORWARD, "JUMP_FORWARD"},
    {POP_JUMP_IF_FALSE, "POP_JUMP_IF_FALSE"},
    {POP_JUMP_IF_TRUE, "POP_JUMP_IF_TRUE"},
    {LOAD_GLOBAL, "LOAD_GLOBAL"},
    {IS_OP, "IS_OP"},
    {CONTAINS_OP, "CONTAINS_OP"},
    {RERAISE, "RERAISE"},
    {COPY, "COPY"},
    {RETURN_CONST, "RETURN_CONST"},
    {BINARY_OP, "BINARY_OP"},
    {SEND, "SEND"},
    {LOAD_FAST, "LOAD_FAST"},
    {STORE_FAST, "STORE_FAST"},
    {DELETE_FAST, "DELETE_FAST"},
    {LOAD_FAST_CHECK, "LOAD_FAST_CHECK"},
    {POP_JUMP_IF_NOT_NONE, "POP_JUMP_IF_NOT_NONE"},
    {POP_JUMP_IF_NONE, "POP_JUMP_IF_NONE"},
    {RAISE_VARARGS, "RAISE_VARARGS"},
    {GET_AWAITABLE, "GET_AWAITABLE"},
    {MAKE_FUNCTION, "MAKE_FUNCTION"},
    {BUILD_SLICE, "BUILD_SLICE"},
    {JUMP_BACKWARD_NO_INTERRUPT, "JUMP_BACKWARD_NO_INTERRUPT"},
    {MAKE_CELL, "MAKE_CELL"},
    {LOAD_CLOSURE, "LOAD_CLOSURE"},
    {LOAD_DEREF, "LOAD_DEREF"},
    {STORE_DEREF, "STORE_DEREF"},
    {DELETE_DEREF, "DELETE_DEREF"},
    {JUMP_BACKWARD, "JUMP_BACKWARD"},
    {LOAD_SUPER_ATTR, "LOAD_SUPER_ATTR"},
    {CALL_FUNCTION_EX, "CALL_FUNCTION_EX"},
    {LOAD_FAST_AND_CLEAR, "LOAD_FAST_AND_CLEAR"},
    {EXTENDED_ARG, "EXTENDED_ARG"},
    {LIST_APPEND, "LIST_APPEND"},
    {SET_ADD, "SET_ADD"},
    {MAP_ADD, "MAP_ADD"},
    {COPY_FREE_VARS, "COPY_FREE_VARS"},
    {YIELD_VALUE, "YIELD_VALUE"},
    {RESUME, "RESUME"},
    {MATCH_CLASS, "MATCH_CLASS"},
    {FORMAT_VALUE, "FORMAT_VALUE"},
    {BUILD_CONST_KEY_MAP, "BUILD_CONST_KEY_MAP"},
    {BUILD_STRING, "BUILD_STRING"},
    {LIST_EXTEND, "LIST_EXTEND"},
    {SET_UPDATE, "SET_UPDATE"},
    {DICT_MERGE, "DICT_MERGE"},
    {DICT_UPDATE, "DICT_UPDATE"},
    {CALL, "CALL"},
    {KW_NAMES, "KW_NAMES"},
    {CALL_INTRINSIC_1, "CALL_INTRINSIC_1"},
    {CALL_INTRINSIC_2, "CALL_INTRINSIC_2"},
    {LOAD_FROM_DICT_OR_GLOBALS, "LOAD_FROM_DICT_OR_GLOBALS"},
    {LOAD_FROM_DICT_OR_DEREF, "LOAD_FROM_DICT_OR_DEREF"},
    {MIN_INSTRUMENTED_OPCODE, "MIN_INSTRUMENTED_OPCODE"},
    {INSTRUMENTED_LOAD_SUPER_ATTR, "INSTRUMENTED_LOAD_SUPER_ATTR"},
    {INSTRUMENTED_POP_JUMP_IF_NONE, "INSTRUMENTED_POP_JUMP_IF_NONE"},
    {INSTRUMENTED_POP_JUMP_IF_NOT_NONE, "INSTRUMENTED_POP_JUMP_IF_NOT_NONE"},
    {INSTRUMENTED_RESUME, "INSTRUMENTED_RESUME"},
    {INSTRUMENTED_CALL, "INSTRUMENTED_CALL"},
    {INSTRUMENTED_RETURN_VALUE, "INSTRUMENTED_RETURN_VALUE"},
    {INSTRUMENTED_YIELD_VALUE, "INSTRUMENTED_YIELD_VALUE"},
    {INSTRUMENTED_CALL_FUNCTION_EX, "INSTRUMENTED_CALL_FUNCTION_EX"},
    {INSTRUMENTED_JUMP_FORWARD, "INSTRUMENTED_JUMP_FORWARD"},
    {INSTRUMENTED_JUMP_BACKWARD, "INSTRUMENTED_JUMP_BACKWARD"},
    {INSTRUMENTED_RETURN_CONST, "INSTRUMENTED_RETURN_CONST"},
    {INSTRUMENTED_FOR_ITER, "INSTRUMENTED_FOR_ITER"},
    {INSTRUMENTED_POP_JUMP_IF_FALSE, "INSTRUMENTED_POP_JUMP_IF_FALSE"},
    {INSTRUMENTED_POP_JUMP_IF_TRUE, "INSTRUMENTED_POP_JUMP_IF_TRUE"},
    {INSTRUMENTED_END_FOR, "INSTRUMENTED_END_FOR"},
    {INSTRUMENTED_END_SEND, "INSTRUMENTED_END_SEND"},
    {INSTRUMENTED_INSTRUCTION, "INSTRUMENTED_INSTRUCTION"},
    {INSTRUMENTED_LINE, "INSTRUMENTED_LINE"},
    {MIN_PSEUDO_OPCODE, "MIN_PSEUDO_OPCODE"},
    {SETUP_FINALLY, "SETUP_FINALLY"},
    {SETUP_CLEANUP, "SETUP_CLEANUP"},
    {SETUP_WITH, "SETUP_WITH"},
    {POP_BLOCK, "POP_BLOCK"},
    {JUMP, "JUMP"},
    {JUMP_NO_INTERRUPT, "JUMP_NO_INTERRUPT"},
    {LOAD_METHOD, "LOAD_METHOD"},
    {LOAD_SUPER_METHOD, "LOAD_SUPER_METHOD"},
    {LOAD_ZERO_SUPER_METHOD, "LOAD_ZERO_SUPER_METHOD"},
    {LOAD_ZERO_SUPER_ATTR, "LOAD_ZERO_SUPER_ATTR"},
    {STORE_FAST_MAYBE_NULL, "STORE_FAST_MAYBE_NULL"},
    {MAX_PSEUDO_OPCODE, "MAX_PSEUDO_OPCODE"},
    {BINARY_OP_ADD_FLOAT, "BINARY_OP_ADD_FLOAT"},
    {BINARY_OP_ADD_INT, "BINARY_OP_ADD_INT"},
    {BINARY_OP_ADD_UNICODE, "BINARY_OP_ADD_UNICODE"},
    {BINARY_OP_INPLACE_ADD_UNICODE, "BINARY_OP_INPLACE_ADD_UNICODE"},
    {BINARY_OP_MULTIPLY_FLOAT, "BINARY_OP_MULTIPLY_FLOAT"},
    {BINARY_OP_MULTIPLY_INT, "BINARY_OP_MULTIPLY_INT"},
    {BINARY_OP_SUBTRACT_FLOAT, "BINARY_OP_SUBTRACT_FLOAT"},
    {BINARY_OP_SUBTRACT_INT, "BINARY_OP_SUBTRACT_INT"},
    {BINARY_SUBSCR_DICT, "BINARY_SUBSCR_DICT"},
    {BINARY_SUBSCR_GETITEM, "BINARY_SUBSCR_GETITEM"},
    {BINARY_SUBSCR_LIST_INT, "BINARY_SUBSCR_LIST_INT"},
    {BINARY_SUBSCR_TUPLE_INT, "BINARY_SUBSCR_TUPLE_INT"},
    {CALL_PY_EXACT_ARGS, "CALL_PY_EXACT_ARGS"},
    {CALL_PY_WITH_DEFAULTS, "CALL_PY_WITH_DEFAULTS"},
    {CALL_BOUND_METHOD_EXACT_ARGS, "CALL_BOUND_METHOD_EXACT_ARGS"},
    {CALL_BUILTIN_CLASS, "CALL_BUILTIN_CLASS"},
    {CALL_BUILTIN_FAST_WITH_KEYWORDS, "CALL_BUILTIN_FAST_WITH_KEYWORDS"},
    {CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS,
     "CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS"},
    {CALL_NO_KW_BUILTIN_FAST, "CALL_NO_KW_BUILTIN_FAST"},
    {CALL_NO_KW_BUILTIN_O, "CALL_NO_KW_BUILTIN_O"},
    {CALL_NO_KW_ISINSTANCE, "CALL_NO_KW_ISINSTANCE"},
    {CALL_NO_KW_LEN, "CALL_NO_KW_LEN"},
    {CALL_NO_KW_LIST_APPEND, "CALL_NO_KW_LIST_APPEND"},
    {CALL_NO_KW_METHOD_DESCRIPTOR_FAST, "CALL_NO_KW_METHOD_DESCRIPTOR_FAST"},
    {CALL_NO_KW_METHOD_DESCRIPTOR_NOARGS,
     "CALL_NO_KW_METHOD_DESCRIPTOR_NOARGS"},
    {CALL_NO_KW_METHOD_DESCRIPTOR_O, "CALL_NO_KW_METHOD_DESCRIPTOR_O"},
    {CALL_NO_KW_STR_1, "CALL_NO_KW_STR_1"},
    {CALL_NO_KW_TUPLE_1, "CALL_NO_KW_TUPLE_1"},
    {CALL_NO_KW_TYPE_1, "CALL_NO_KW_TYPE_1"},
    {COMPARE_OP_FLOAT, "COMPARE_OP_FLOAT"},
    {COMPARE_OP_INT, "COMPARE_OP_INT"},
    {COMPARE_OP_STR, "COMPARE_OP_STR"},
    {FOR_ITER_LIST, "FOR_ITER_LIST"},
    {FOR_ITER_TUPLE, "FOR_ITER_TUPLE"},
    {FOR_ITER_RANGE, "FOR_ITER_RANGE"},
    {FOR_ITER_GEN, "FOR_ITER_GEN"},
    {LOAD_SUPER_ATTR_ATTR, "LOAD_SUPER_ATTR_ATTR"},
    {LOAD_SUPER_ATTR_METHOD, "LOAD_SUPER_ATTR_METHOD"},
    {LOAD_ATTR_CLASS, "LOAD_ATTR_CLASS"},
    {LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN, "LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN"},
    {LOAD_ATTR_INSTANCE_VALUE, "LOAD_ATTR_INSTANCE_VALUE"},
    {LOAD_ATTR_MODULE, "LOAD_ATTR_MODULE"},
    {LOAD_ATTR_PROPERTY, "LOAD_ATTR_PROPERTY"},
    {LOAD_ATTR_SLOT, "LOAD_ATTR_SLOT"},
    {LOAD_ATTR_WITH_HINT, "LOAD_ATTR_WITH_HINT"},
    {LOAD_ATTR_METHOD_LAZY_DICT, "LOAD_ATTR_METHOD_LAZY_DICT"},
    {LOAD_ATTR_METHOD_NO_DICT, "LOAD_ATTR_METHOD_NO_DICT"},
    {LOAD_ATTR_METHOD_WITH_VALUES, "LOAD_ATTR_METHOD_WITH_VALUES"},
    {LOAD_CONST__LOAD_FAST, "LOAD_CONST__LOAD_FAST"},
    {LOAD_FAST__LOAD_CONST, "LOAD_FAST__LOAD_CONST"},
    {LOAD_FAST__LOAD_FAST, "LOAD_FAST__LOAD_FAST"},
    {LOAD_GLOBAL_BUILTIN, "LOAD_GLOBAL_BUILTIN"},
    {LOAD_GLOBAL_MODULE, "LOAD_GLOBAL_MODULE"},
    {STORE_ATTR_INSTANCE_VALUE, "STORE_ATTR_INSTANCE_VALUE"},
    {STORE_ATTR_SLOT, "STORE_ATTR_SLOT"},
    {STORE_ATTR_WITH_HINT, "STORE_ATTR_WITH_HINT"},
    {STORE_FAST__LOAD_FAST, "STORE_FAST__LOAD_FAST"},
    {STORE_FAST__STORE_FAST, "STORE_FAST__STORE_FAST"},
    {STORE_SUBSCR_DICT, "STORE_SUBSCR_DICT"},
    {STORE_SUBSCR_LIST_INT, "STORE_SUBSCR_LIST_INT"},
    {UNPACK_SEQUENCE_LIST, "UNPACK_SEQUENCE_LIST"},
    {UNPACK_SEQUENCE_TUPLE, "UNPACK_SEQUENCE_TUPLE"},
    {UNPACK_SEQUENCE_TWO_TUPLE, "UNPACK_SEQUENCE_TWO_TUPLE"},
    {SEND_GEN, "SEND_GEN"},

};

}

std::string OpcodeToString(uint8_t opcode) {
  CHECK(opcode_to_name.find(opcode) != opcode_to_name.end())
      << "Unknown opcode: " << static_cast<uint64_t>(opcode);
  return opcode_to_name[opcode];
}
